[
  
    {
      "title"    : "뷰어앱 출시 프로젝트 회고",
      "category" : "",
      "tags"     : "개발 and 회고",
      "url"      : "/%EB%B7%B0%EC%96%B4%EC%95%B1-%EC%B6%9C%EC%8B%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0",
      "date"     : "Oct 11, 2021",
      "content"  : "드디어 나도 코로나 2차 백신 접종자가 되었다. 내 몸 속의 백혈구들이 백신 속 바이러스들과 치열한 싸움을 하고있는 것 처럼, 지난 2개월간 나와 우리 회사 팀원들도 함께 도기보기 뷰어앱 출시 프로젝트라는 치열한 싸움을 마침내 끝내게 되었다(끝이라고 하고싶다).2개월이라는 기간 동안 나와 팀원들 함께 노력했던 과정들을 시간이 지난 후에도 기억하고싶었고, 프로젝트를 진행하며 답을 찾지 못했던 질문들에 대한 답들도 미래에는 찾을 수 있을 것 같아 이참에 기록해보고자 한다. 기억이란 것은 항상 미화되거나 머리에서 지워지니까.동호대교는 저녁 12시면 불이 꺼진다는 사실을 알게되었다📌 1. 프로젝트 요약  기간 : 8월 초 ~ 10월 7일, 약 2개월  프로젝트 산출물          악화된 건강      CCTV 영상과 도기리포트를 볼 수 있는 안드로이드, iOS 앱(a.k.a 뷰어앱)      뷰어앱을 위한 백엔드 서버(FastAPI)      뷰어앱에 임베딩되는 CCTV, 도기리포트 웹페이지(Vue)        참여한 인력          개발 3명, 디자인/기획 1명      개발 인력 중 1명은 외부 인력으로서 React-Native 개발을 맡았고, 각자 회사의 다른 개발 업무도 진행하며 해당 프로젝트에 참여하였음.        나의 포지션          프로젝트 개발 업무 관리 / 백엔드(FastAPI) 서버 개발 / 공기계 앱(안드로이드), 기존 메인 서버(Flask) 로직 수정 개발(다른 분들도 웹 수정 개발, 백엔드 개발, 게다가 이 프로젝트 이외의 업무도 함께 했어야했다)      📌 2. 개발 내용2.1 FastAPI 백엔드 개발  기존에 운영중인 Flask 기반 서버에 로직을 구현하는 것을 고민했지만, 서비스가 이런저런 시도를 하다보니 남게되는 레거시 코드들과 로직들이 점점 쌓여가고있어 새로운 프레임워크의 백엔드를 별도로 구현하기로 결정했다.  FastAPI의 기능 중 API 자동 문서화(swagger)로 팀 외부에 계신 RN 개발자 분과 소통, 테스트가 편리했다.  프로덕션용 서버 개발을 위해 해야하는 여러 장치들(환경 변수 관리, HTTPS 적용, JWT 토큰 등)을 공부하며 적용했다.2.2 공기계 앱(안드로이드) 로직 수정 개발  이번 프로젝트를 진행하다보니 기존에 운영중인 CCTV 영상 송신용 앱은 리포트되는 에러만 수정하는 것만으로도 빠듯했다.  뷰어앱이 출시되면서 해당 앱에서는 몇몇 화면이 없어진다던지, 앱의 플로우가 일부 수정되어야 했다. 다행히도 코드를 수정할 때 기존 로직을 잘 드러내기만 하면 되는 것들이어서 다행이었다. 역시 이럴 때를 대비해서 코드를 짜는거구나! 싶었다. 지금 불편하고 머리 터질 것 같아도 언젠가는 감사할 순간들이 온다는 것을 경험했다.(언제까지나 계속 유지되고 오래 갈 코드라는 전제에서)  안드로이드 코드에 손을 댄지 좀 오래돼서 이전의 코드들과 나의 과오(?)들을 마주하는게 부끄러웠다. 왜 이렇게 짰지? 누가 보면 욕하겠다…싶었다. 이런 걸 자극으로 삼아서 시간 날 때마다 리팩토링을 고민해보고싶다.2.3 기존 메인 서버(Flask) 로직 수정 개발  현재 서비스를 받쳐주는 백엔드는 Flask를 이용하고있다. 관련해서 기존 백엔드 로직도 수정해야했는데, 이 또한 기존 레거시 코드들에서 필요한 로직을 걷어내고 수정하는 것들이 주된 업무였다.  내 코드를 누군가 보면 ‘???’하는 순간이 올 것 같은데, 최대한 읽기 쉬운📌 3. 아직 정제되지않은 생각들 메모  이정도면 괜찮지 않을까? 테스트 대충해도 돼지 않을까? 하는 마음이 드는 것이 놀라웠다.  커뮤니케이션에 관하여          같이 구현해야하는 것에 있어 상대방을 설득해야하는 연습을 많이 한 것 같다.      반대로 내 의견을 내려놓고 공동의 목표에 더 초점을 맞춰 상대방의 의견을 받아들이는 연습도 하게된 것 같다.      이 프로젝트에 주로 참여하지 않는 다른 팀원들에게 진행상황을 더 잘 공유했었으면 좋았을 것 같다. 안해서 딱히 문제가 된 일이 있던 건 아니지만, 아무튼 더 좋았을 것 같다.        툴을 알아놓는 것을 하면 좋을 것 같다.          외부에 있는 인력과 내부 인력간의 소통을 도울 수 있는 툴(공동 문서, 메신저를 통한 소통 규칙 등)을 많이 알아두면 좋을 것 같다. 우선은 손에 닿는 방식으로 시도하긴 했지만 효율적인 방식을 연구하고 적용하려고 노력하는 시간이 부족했던 것 같다. 이래서 한 번 큰 시스템에 몸담고 일을 해보는 것도 필요하다고 하는 것 같다. 연구하는 건 오래 걸리지만 이미 기존에 잘 만들어지고 다듬어진 방식도 의미가 있다고 생각한다.      문서가 필요할까? 라는 생각도 잠깐 해보게 되었다. 어느 정도의 문서가 필요하고 필요하지 않을까?        출시 주간          출시를 위한 타임라인을 짜고싶었지만, 파트가 워낙 다양해서 꼼꼼히 하지는 못했다.      QA를 체계적으로 하지 못한 것 같아 아쉽다.        사람에 관하여          사람은 각자 강점이 있고, 완벽한 사람은 없다.      역시 사람은 마감 기간이 다가오면 열심히 한다.      완벽한 계획은 없는걸까?      📌 4. TODO  팀원 분들과 1대1로 티타임 가지기          피드백 받기      고민은 없는지?      하고싶은건 없는지?        docker화 해서 배포 자동화하기  꾸준한 리팩토링하",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-10-11T00:00:00+03:00'>11 Oct 2021</time><a class='article__image' href='/%EB%B7%B0%EC%96%B4%EC%95%B1-%EC%B6%9C%EC%8B%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0'> <img src='https://user-images.githubusercontent.com/26498433/136696314-21dfb39f-1774-477d-ba3d-eb829e22c73d.png' alt='뷰어앱 출시 프로젝트 회고'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/%EB%B7%B0%EC%96%B4%EC%95%B1-%EC%B6%9C%EC%8B%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0'>뷰어앱 출시 프로젝트 회고</a> </h2><p class='article__excerpt'>코로나 2차 백신을 맞았어요</p></div></div></div>"
    } ,
  
    {
      "title"    : "S3, CloudFront, Route53을 이용하여 정적 웹 호스팅하기",
      "category" : "",
      "tags"     : "AWS, S3, CloudFront, Route53, and Web",
      "url"      : "/s3-cloudfront-route53-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%95%EC%A0%81-%EC%9B%B9-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0",
      "date"     : "Sep 26, 2021",
      "content"  : "📌 0. 시작하기 전에  해당 글은 S3로 정적 호스팅중인 웹에 CloudFront를 연동하는 과정에서 발생한 에러를 해결(삽질)하기위해 접근한 방법을 기록하였습니다.  추가적으로 기본적인 S3와 CloudFront의 연동, 그리고 Route53을 이용한 도메인(그 중에서도 서브도메인) 연결 과정을 간략하게 다룹니다.  💡정적 웹 사이트란?  정적 웹 사이트는 웹 애플리케이션에 의해 생성되는 동적 웹 페이지와는 반대로, 정확히 저장된 그대로 사용자에게 제공되는 웹 사이트입니다. 정적 웹 사이트는 작성자가 소수이고 콘텐츠 변화가 비교적 드문 사이트에 적합합니다. 정적 웹 사이트의 흔한 사용 사례로는 개인용 웹 사이트나 간단한 마케팅용 웹 사이트를 들 수 있습니다. 정적 웹 사이트는 HTML, JavaScript, 이미지, 동영상 및 기타 파일을 저장된 그대로 웹 사이트 방문자에게 단순히 제공할 뿐이며 애플리케이션 코드를 포함하지 않습니다.출처 : AWS:정적 웹 사이트란 무엇입니까? 📌 1. 개요(큰 그림 잡기)발 그림 죄송합니다좀 더 정제된 개요도(출처 : 링크)(1) Route 53  AWS가 제공하는 DNS 서비스입니다.  우리가 S3로 웹을 호스팅하게되면 AWS가 생성해주는 URL을 사용하게 되는데, 이 URL을 우리가 가진 주소(예. www.zzanzu.co.kr)와 연결해주는 역할을 하게 됩니다. 사용자들은 Route53에 적용한 URL로 웹페이지에 접속하게 됩니다.(2) CloudFront  AWS가 제공하는 CDN 서비스입니다.  S3로 호스팅한 웹에 HTTPS를 적용하고 AWS 인프라의 Edge location(전세계)에  빠르게 전송할 수 있게 해주는 역할을 합니다.(3) S3(Static web hosting)  AWS가 제공하는 스토리지 서비스입니다.  보통은 DB에 저장하기엔 용량이 큰 파일들이나 로그, 텍스트 파일 등을 저장하기위해 사용하지만(용도가 다양합니다), 우리는 코드를 업로드하여 S3가 제공해주는 URL을 통해 접속할 수 있는 웹 페이지를 생성하기위해 사용합니다.📌 2. S3 정적 웹 호스팅(1) S3 콘솔에 접속하여 ‘버킷 만들기’ 버튼을 클릭합니다.(2) 버킷 이름을 설정한 뒤(보유한 도메인을 연결할 것이라면 어떤 이름도 상관없습니다), ‘모든 퍼블릭 엑세스 차단’에 체크된 설정을 해제한 뒤 ‘버킷 만들기’를 클릭합니다.(3) 생성된 버킷에 간단한 웹페이지 코드(여기서는 index.html)를 업로드하도록 하겠습니다. 여러분들께서는 이후에 호스팅하고자 하는 웹 코드를 업로드하시면 됩니다.&amp;lt;!--index.html--&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;  &amp;lt;head&amp;gt;    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;    &amp;lt;title&amp;gt;테스트 페이지&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;  &amp;lt;body&amp;gt;    &amp;lt;p&amp;gt;테스트 페이지입니다.&amp;lt;/p&amp;gt;  &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;파일을 드래그하여 업로드할 수 있습니다.업로드 완료.(4) 버킷의 ‘속성’ 탭의 가장 아래에 있는 ‘정적 웹 사이트 호스팅’의 ‘편집’ 버튼을 누릅니다.(5) ‘정적 웹 사이트 호스팅’을 활성화하고, ‘인덱스 문서’에 이전에 업로드한 index.html을 입력합니다.(6) 버킷의 ‘권한’ 탭의 ‘버킷 정책’에 아래의 스크립트를 추가합니다. Resource 필드의 {버킷 이름}에는 (2)에서 설정한 버킷의 이름을 입력합니다.{    &quot;Version&quot;: &quot;2012-10-17&quot;,    &quot;Statement&quot;: [        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Principal&quot;: &quot;*&quot;,            &quot;Action&quot;: [                &quot;s3:GetObject&quot;            ],            &quot;Resource&quot;: &quot;arn:aws:s3:::{버킷 이름}/*&quot;        }    ]}(7) 다시 ‘속성’ 탭으로 돌아가서 가장 아래 ‘정적 웹 사이트 호스팅’의 ‘버킷 웹 사이트 엔드포인트’에 표시된 URL에 접속하면 (3)에서 만들었던 index.html이 표시되는 것을 확인할 수 있습니다.정리해볼까요?  간단한 웹 코드를 S3 버킷에 업로드하여 URL을 통해 웹페이지를 생성하게 되었습니다.      웹페이지 URL은 다음과 같습니다.    http://{버킷 이름}.s3-website.{버킷 region}.amazonaws.com  📌 3. S3와 CloudFront 연동(1) CloudFront 콘솔에 접속하여 ‘배포 생성’을 클릭합니다.(2) 여기서 중요한데요, 원본 도메인의 드롭다운을 클릭하게되면 여러 S3 버킷들의 목록이 보일 겁니다.버킷을 선택하게되면 다음과 같이 도메인 이름이 입력된 것을 볼 수 있습니다.{버킷 이름}.s3.{버킷 Region}.amazonaws.com여기서 이 도메인 이름을 다음과 같이 수정합니다.(s3 → s3-website){버킷 이름}.s3-website.{버킷 Region}.amazonaws.com(3) 저희는 웹페이지를 HTTPS만 사용하기 위해 ‘뷰어 프로토콜 정책’에서 ‘Redirect HTTP to HTTPS’를 선택하도록 하겠습니다.(4) 완료하였으면 ‘배포 생성’을 클릭합니다. 대략 3분 정도 후에 배포가 완료될 때까지 기다립니다.(5) ‘원본’ 탭에서 ‘원본 도메인’에 (2)에서 입력한 URL 형식이 제대로 되었는지 다시 한 번 확인합니다.{버킷 이름}.s3-website.{버킷 Region}.amazonaws.com(6) ‘세부 정보’의 ‘배포 도메인 이름’의 URL(~~.cloudfront.net)을 복사한 뒤, 웹페이지에서 열어보도록 하겠습니다. 정상적으로 표시되는 것을 확인할 수 있습니다.정리해볼까요?  S3 웹 호스팅 버킷을 CloudFront와 연동하였습니다.  웹페이지 URL은 다음과 같습니다.  https://@@@.cloudfront.net📌 4. CloudFront에 Route53 도메인 연결4.1 도메인 구매  기존에 이미 구입한 도메인이 있는 경우에는 이 과정은 스킵해도 되고, 그렇지 않다면 별도로 도메인을 구매하거나 AWS의 Route53을 통해 구매할 수 있습니다(가이드).4.2 SSL 인증서 발급  AWS Certificate Manager(ACM)를 통해 위에서(4.1) 구매한 도메인을 입력합니다.  다음의 링크에서 발급하는 과정을 참고하시면 좋을 것 같습니다. 참고4.3 CloudFront에 도메인 연결      위에서 생성한 CloudFront의 생성한 배포(distribution)를 클릭하여 ‘일반’ 탭의 ‘설정’에서 ‘편집’ 버튼을 클릭합니다.          ‘설정’ 항목의 ‘대체 도메인 이름(CNAME)’에 부여하고싶은 주소를 입력합니다.          ‘사용자 정의 SSL 인증서’에서 4.1에서 발급받은 인증서를 선택하고, ‘변경 사항 저장’을 클릭하여 배포되기를 기다립니다(시간이 조금 걸리니 상심하지 마시고 기다려주세요)          Route53 콘솔로 이동하여 호스팅 영역 내의 연결할 도메인을 클릭합니다.          연결할 도메인을 클릭한 뒤, ‘레코드 생성’을 클릭합니다.            ‘레코드 이름’에 연결할 도메인 주소를 입력하고, ‘레코드 유형’은 A, ‘별칭’ 스위치를 활성화 한 후 ‘트래픽 라우팅 대상’은 ‘CloudFront 배포에 대한 별칭’ 선택 후 미리 생성한 CloudFront 배포의 URL(@@@@.cloudfront.net)을 입력한 뒤 ‘레코드 생성’을 클릭합니다.          잠시 기다린 뒤 생성한 도메인 주소를 입력하면 정상적으로 웹페이지가 등록된 것을 확인할 수 있습니다. 수고하셨습니다.      ",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-09-26T19:00:00+03:00'>26 Sep 2021</time><a class='article__image' href='/s3-cloudfront-route53-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%95%EC%A0%81-%EC%9B%B9-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0'> <img src='https://user-images.githubusercontent.com/26498433/128895114-720e4bb7-e2af-49d0-9815-1b2ec447d119.png' alt='S3, CloudFront, Route53을 이용하여 정적 웹 호스팅하기'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/s3-cloudfront-route53-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%95%EC%A0%81-%EC%9B%B9-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0'>S3, CloudFront, Route53을 이용하여 정적 웹 호스팅하기</a> </h2><p class='article__excerpt'>원하는 도메인 주소를 가진 정적 웹 사이트를 호스팅하는 방법을 알아봅시다</p></div></div></div>"
    } ,
  
    {
      "title"    : "FastAPI 백엔드를 구축하기 전에 알았으면 좋았을 것들",
      "category" : "",
      "tags"     : "FastAPI, pydantic, and 백엔드",
      "url"      : "/FastAPI-%EB%B0%B1%EC%97%94%EB%93%9C%EB%A5%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EC%95%8C%EC%95%98%EC%9C%BC%EB%A9%B4-%EC%A2%8B%EC%95%98%EC%9D%84-%EA%B2%83%EB%93%A4",
      "date"     : "Sep 12, 2021",
      "content"  : "📌 1. 읽기 전에  📌 해당 글은 저자가 FastAPI를 이용한 백엔드 서버를 구축하며 필요한 개념들을 밀키트(?) 형식으로 작성한 글입니다.📌 FastAPI로 백엔드 서버를 구축하고자 하는데 어디서부터 시작해야할지 고민중인 분들께 조금이나마 도움이 되기를 바랍니다.  📌 해당 글에서는 다음과 같은 내용들을 다룹니다.- pydantic 라이브러리를 통한 model 정의- 프로젝트 폴더 구조📌 2. Model 정의어떤 서비스를 개발하든지 데이터를 정의하고 체계화하는 것이 필수라고 생각합니다. FastAPI를 통한 API 서버를 구축할 때도 마찬가지인데요, FastAPI 서버의 request와 response에 사용되는 데이터(Model)를 정의해봅시다.2.1 pydantic      공식 문서 링크    백엔드 서버라고 한다면 많은 정보들을 조합하고 가공하는 로직이 많을텐데, 이 과정에서 데이터의 유효성이나 형식을 관리하는 것은 매우 번거롭고 복잡할 것입니다. 따라서 pydantic과 같은 data validation 라이브러리를 사용하여 이러한 번거로움을 줄일 수 있습니다.          엄밀히 말하면 validation을 해주는 라이브러리는 아닙니다. 공식 문서에도 나와있지만 input data가 아닌 output model의 형(type)과 조건(constraint)을 보장해주는 라이브러리라고 할 수 있습니다.        대표적으로 FastAPI와 궁합(?)을 맞춰 사용하고, 이미 다양한 프로젝트들에서 사용할 만큼 활용도가 높습니다.jupyter notebook의 여러 서브 프로젝트에서도 사용한다고 jupyter notebook의 개발자가 친히(?) pydantic 프로젝트 이슈에 글을 남기기도 했군요.2.2 Modelpydantic이 무엇인지 대충은 알고 넘어갔으니, 이제는 실제로 model을 정의하는 방식을 살펴봅시다.from datetime import datetimefrom typing import List, Optionalfrom pydantic import BaseModelclass User(BaseModel):    id: int    name = &#39;John Doe&#39;    signup_ts: Optional[datetime] = None    friends: List[int] = []pydantic의 예제 코드를 그대로 가져와봤는데요, 위의 코드를 통해 데이터 모델의 형 선언과 여러 옵션을 살펴볼 수 있습니다.2.2.1 BaseModelfrom pydantic import BaseModelclass User(BaseModel):pydantic을 통해 object를 정의하기 위해서는 위에서부터 계속 언급한 Model이라는 개념을 사용하는데요, 간단히 말하면 pydantic의 BaseModel을 상속한 클래스입니다.위의 예시에서는 User라는 Model을 정의하였고, pydantic을 통한 data validation이 가능해지는 object를 생성할 수 있게 되었군요.2.2.2 field 정의from datetime import datetimefrom typing import List, Optionalfrom pydantic import BaseModelclass User(BaseModel):    id: int # required    name = &#39;John Doe&#39; # not required    signup_ts: Optional[datetime] = None # not required    friends: List[int] = [] # not required여기서부터는 잠시 집중해주실 필요가 있습니다. 앞으로 많은 Model을 정의하시게 되면서 헷갈릴 수 있거든요.(1) 필수 vs 필수가 아닌 필드 선언’ =을 통한 default값 선언이 있느냐 없느냐로 구분한다’  를 기억합시다. 위의 코드에서 id같은 경우에는 값이 선언되어있지 않기 때문에 필수(required) 필드이고, 나머지 name, signup_ts, friends 필드의 경우 default값이 선언되어있기 때문에 필수 필드가 아닙니다. 즉 다시 말해 User object를 선언할 경우, id 필드의 데이터를 반드시 정의해주어야합니다.user = User(id=&#39;123&#39;)이렇게 user라는 이름의 User object를 선언하게 되면, id값만 선언해주었지만 다른 field의 값은 default 값으로 채워지겠죠?assert user.name == &#39;Jane Doe&#39; # True!(2) 필드 타입 선언from typing import List, Optionalclass User(BaseModel):    id: int    name = &#39;John Doe&#39;    signup_ts: Optional[datetime] = None    friends: List[int] = []위의 코드를 보며 어느정도 유추할 수 있듯이, id같은 경우 int 타입이라는 것을 알 수 있고, signup_ts는 뭔지는 모르겠지만 대충 datetime 타입이라는 것, friends의 경우 int형 리스트라는 것을 아실 수 있으실 겁니다.특이한 점이 있다면 name 필드같은 경우에는 따로 타입이 선언되어있지 않지만, ‘John Doe’라는 값을 default값으로 선언하여 str(문자열) 타입이라는 것을 선언하였습니다. 이런 식으로 default값을 통해 타입을 선언할 수도 있습니다.다음으로는 signup_ts, friends 필드에는 각각 Optional, List 타입으로 선언이 되었는데요, 이는 typing 모듈(공식 docs)에서 지원하는 기능입니다. 타입 힌트를 언어 차원에서 지원하기 위해 파이썬 3.5 버전에서부터 스탠다드 라이브러리로 추가되었습니다.2.2.3 정리      지금까지 기본적인 Model을 정의하는 방법, Model 내의 field에 대해서 필요하다고 생각하는 부분에 대해서만 설명드렸는데, 어떠셨나요? 분명 설명이 부족하겠지만 이런 부분은 앞으로 개발하시며 공식 문서를 읽어가다보면 자연스럽게 덧칠이 되는 느낌을 받으실 수 있으실 겁니다(개인적으로는 공식 문서를 읽는 재미가 있는 것 같았습니다).        마지막으로 실제 사용 예시 코드를 보며 간단히 정리해봅시다.  from typing import Listfrom pydantic import BaseModelclass Foo(BaseModel):    count: int    size: float = Noneclass Bar(BaseModel):    apple = &#39;x&#39;    banana = &#39;y&#39;class Spam(BaseModel):    foo: Foo    bars: List[Bar]3개의 Model이 정의되었군요. 어떻게 알 수 있냐구요? BaseModel을 상속한 클래스가 3개 있거든요!Foo라는 Model은 int형 required 필드인 count와 default 값이 None으로 선언된 not required 필드인 size로 이루어졌군요.다음으로 Bar라는 Model은 시크합니다. not required 필드 2개로 ‘x’와 ‘y’값이 default인 필드로 이루어졌군요. 타입이 따로 선언되지 않았지만 default값이 둘 다 문자열(‘ ‘)인 것으로 보아 str(문자열) 타입인 것을 알 수 있습니다.마지막으로 Spam은 좀 신기합니다. 우리가 아는 타입(str, int 등)이 아닌 우리가 위에서 선언한 Model들을 타입으로 사용했습니다. 따라서 bars는 typing의 List 타입을 이용하여 Bar 타입의 리스트인 것을 알 수 있겠습니다(required 필드인 것도 아셨겠죠?!).이처럼 우리가 정의한 Model은 또 다른 Model의 타입으로 사용될 수 있습니다. 서비스를 개발하시다보면 나도 모르게 데이터들의 구조를 신경쓰며 개발하고있는(?) 본인을 발견하시게 될 겁니다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-09-12T21:00:00+03:00'>12 Sep 2021</time><a class='article__image' href='/FastAPI-%EB%B0%B1%EC%97%94%EB%93%9C%EB%A5%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EC%95%8C%EC%95%98%EC%9C%BC%EB%A9%B4-%EC%A2%8B%EC%95%98%EC%9D%84-%EA%B2%83%EB%93%A4'> <img src='https://user-images.githubusercontent.com/26498433/132981926-2bea56c7-8547-4242-98e2-66347a553b34.png' alt='FastAPI 백엔드를 구축하기 전에 알았으면 좋았을 것들'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/FastAPI-%EB%B0%B1%EC%97%94%EB%93%9C%EB%A5%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EC%95%8C%EC%95%98%EC%9C%BC%EB%A9%B4-%EC%A2%8B%EC%95%98%EC%9D%84-%EA%B2%83%EB%93%A4'>FastAPI 백엔드를 구축하기 전에 알았으면 좋았을 것들</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "AWS Parameter Store 적용하기",
      "category" : "",
      "tags"     : "aws and python",
      "url"      : "/aws-ssm-parameter-store",
      "date"     : "Aug 11, 2021",
      "content"  : "📌 1. 읽기 전에  본 글에서는 AWS의 System Manager(구 SSM) 전체를 다루는 것이 아닌, 기능의 일부인 Parameter Store에 대해 설명합니다.      코드를 작성하다보면 github 레파지토리에 올라가기에는 민감한 정보들(주로 config 값들)을 어떻게 관리해야할까, 한 번쯤은 고민해보셨을 겁니다.        저 또한 이러한 상황에 익숙하지 않은 시절에는 이러한 정보들을 별도의 파일에 정의한 뒤 .gitignore 파일에 추가하여 레포지터리에는 업로드되지 않도록 하던 시절도 있었습니다 -_-;;        하지만 이러한 경우 협업 과정에서 공유하는 과정이 번거롭기도 하고, 그렇다고 안전하게 관리되는 느낌이 있지도 않았습니다.        그러던 중, AWS의 Parameter Store를 통해 이러한 상황을 해결해줄 수 있다는 것을 알게 되었습니다.        이 글을 통해 AWS Parameter Store가 무엇이고, 어떤 기능을 제공하는지 이해가 되신다면 좋겠습니다 :)  📌 2. Parameter Store란?      AWS System Manager의 여러 기능 중 하나입니다.    참고로 System Manager에는 5개 유형의 기능을 제공합니다.          Operations Management      Application Management      Change Management      Node Management      Shared Resources        이 중에서 Parameter Store는 Application Management에 속하는 기능으로서,          우리가 작성한 코드에서 secret값이나 config값을 분리시켜주고(암호화도 원한다면 사용 가능)      AWS의 여러 서비스들 내에서 이 값들을 사용할 수 있게 해줍니다.      2.1 parameter가 뭔데?      Parameter Store의 parameter는 Parameter Store에 저장된 텍스트 블록이나 이름의 리스트, 비밀번호, 또는 AMI ID와 같은 데이터를 의미합니다. 이를 통해 우리의 스크립트나 커맨드같은 곳에서 안전히 관리된 채로 사용할 수 있습니다.    parameter에는 3가지 타입이 있습니다.          String      StringList      SecureString        String과 StringList는 말 그대로 문자열과 문자열 리스트 타입입니다. 말 그대로 문자열과 문자열 리스트를 Parameter Store에 저장해놓고 코드에서 불러오는 형식으로 사용할 수 있는 것이죠.// String 타입 예시abc123Example Corp&amp;lt;img src=&quot;images/bannerImage1.png&quot;/&amp;gt;// StringList 타입 예시 - 쉼표(comma)로 구분된 문자열Monday,Wednesday,FridayCSV,TSV,CLF,ELF,JSON  코드 내에서 뿐만 아니라, 운영중인 서비스(웹, 앱 등) 내에서 공통적으로 사용되는 값(예. 이미지 URL)들은 Parameter Store로 관리한다면 편리할 것 같네요!SecureString 타입      조심스럽게 참조/저장되어야하는 민감한 데이터인 경우 사용되는 타입입니다. 비밀번호나 라이센스 키와같이 사용자들에 의해 바뀌거나 참조되지 않아야하는 데이터가 있는 경우, 이 타입을 사용하여 parameter를 생성하면 됩니다.        다시 한 번 강조하지만, 민감한 정보인 경우 String이나 StringList를 쓰면 안됩니다!(Don’t) 민감한 정보는 반드시 암호화되어야 하기 때문에, SecureString을 사용해야합니다.        ‘그래도 그냥 String으로 사용해도 되지 않을까?’ 할 수 있겠지만, 우리가 모르는 사이에 CloudTrail 로그나 일반 커맨드 메세지나 agent 로그에 포함되어있을 수도 있습니다.        SecureString은 AWS의 KMS key를 이용하여 decrypt, encrypt됩니다. KMS key는 AWS가 기본으로 제공하는 값을 사용해도 되고, 우리가 만든 KMS key를 사용해도 됩니다.        작동 방식은 링크 를 참고해주세요. getParameter()를 실행할 떄 with-decryption 옵션을 활성화한 경우 자동으로 KMS 인증 로직이 실행되어 decrypt된 value값을 얻게 됩니다.        다양한 AWS 내의 서비스에서 사용될 수 있는데요, 심지어는 람다 코드 내에서도 parameter 값을 불러와서 사용할 수 있습니다.  from __future__ import print_function import jsonimport boto3ssm = boto3.client(&#39;ssm&#39;, &#39;ap-northeast-2&#39;)def get_parameters():    # LambdaSecureString라고 정의한 값을 불러옵니다.    response = ssm.get_parameters(        Names=[&#39;LambdaSecureString&#39;],WithDecryption=True    )    for parameter in response[&#39;Parameters&#39;]:        return parameter[&#39;Value&#39;]        def lambda_handler(event, context):    value = get_parameters()    print(&quot;value1 = &quot; + value)    return value  # Echo back the first key value📌 3. 사용해보기  python 코드 내에서 SecureString 타입으로 정의한 값을 사용하는 예시입니다.Step 1. parameter 생성 하기      parameter는 AWS 의 콘솔(웹)에서도 생성이 가능하고, AWS CLI를 통해 생성하는 것도 가능합니다. 아래 예시에서는 콘솔을 통해 생성하는 것으로 설명합니다.        AWS의 System Manager &amp;gt; 좌측 메뉴에서 Parameter Store 클릭 &amp;gt; Create parameter 클릭 &amp;gt; Name에 parameter 이름 입력 &amp;gt; Type 선택 및 Value 입력    Name          parameter의 이름(변수명이라고 생각하면 편할 것 같습니다)을 선언합니다.      운영중인 여러 서비스 내에서 사용될 수 있기 때문에 하이픈(‘-‘)을 이용해 의미를 설명할 수 있겠죠?(갑자기 질문)      (예) server-dev-db-url : 개발 서버의 DB URL 정보를 저장합니다.        Tier - ref          Standard : default Tier로써 해당 Region에 최대 10,000개의 parameter를 저장할 수 있게 됩니다. 저의 경우처럼 고작해야 서비스 내의 변수들만 관리하는 용도라면 문제가 없겠지만, 실시간으로 parameter를 생성해야하는 로직이 있다면 Advanced Tier를 고려하는 것이 좋습니다.      Advanced : parameter를 100,000개까지 생성할 수 있습니다. 자세한 내용은 ref의 링크를 참고해주세요.            Type : 위에서 설명한 것 처럼 사용하려는 용도에 맞는 타입을 선택합니다.        Value : 실제로 불러올 값을 입력합니다(config, secret 값 등)    생성 완료 예시  Step 2. Policy 선언 및 코드 구현(Python 예시)      parameter를 생성하였으니, 코드 내에서 잘 불러와지는지 확인해봅시다.    우선, 파이썬 코드 내에서 AWS의 서비스(S3, SQS 등)를 접근하기 위해서는 boto3라는 라이브러리를 사용해야합니다.    $ pip install boto3        또한 AWS 서비스에 접근하기 위해서는 코드를 작성하는 환경이 해당 권한을 가지고 있다는 것을 증명해야합니다. 증명 방법에는 여러가지가 있는데, AWS CLI를 설치한 뒤 config에 Access Key와 ID를 직접 등록하는 방식도 있고, 코드 내에 직접 추가하는 방식도 있지만(보안적으로 후자의 방식은 별로 추천하지 않는다), IAM policy를 생성하여 코드를 실행하는 인스턴스에 적용된 권한에 추가합니다.  Action : 허용할 action을 추가합니다. 여기서는 parameter를 불러오는 기능만 테스트하기 때문에 GetParameter에 대한 권한을 추가했습니다.      Resource : policy를 통해 접근 가능한 parameter를 추가합니다. 위의 예시에서는 ‘*‘을 입력하여 모든 parameter를 접근할 수 있도록 하였습니다.    마지막으로 아래의 코드를 통해 parameter를 불러옵니다. boto3 문서 참고def __get_parameter(parameter_name):    &quot;&quot;&quot;    AWS SSM Parameter Store에 등록된 {parameter_name} 값을 불러옴.    :return: Parameter Store에 저장된 값        세부적인 api는 boto3 공식 문서 참고    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ssm.html#SSM.Client.get_parameter    &quot;&quot;&quot;    ssm = boto3.client(&#39;ssm&#39;, &#39;ap-northeast-2&#39;) # Region 입력        response = ssm.get_parameter(        Name=parameter_name, # 미리 생성한 parameter의 name값        WithDecryption=True    )    return response[&#39;Parameter&#39;][&#39;Value&#39;]📌 4. 마치며      당초 생각했던 것보다 많은 내용을 담지 못한 것 같습니다😢 parameter를 생성하고, 불러오는 방식만 설명하려 했지만 Use Case에 따른 옵션들이 다양해서 이것들을 모두 설명하기에는 제 역량이 아직 부족하지 않나 싶습니다.        매번 느끼는 것이지만 AWS 내의 서비스를 사용하기 위해서는 기본 적인 권한(IAM 등)이나 서비스들에 대한 전반적인 특징들을 파악하고 있는 것이 중요한 것 같습니다. Developer Associate를 준비하며 계속 내용들을 정리해나가야 겠습니다.  Reference  AWS System Manager Parameter Store  Create a SecureString parameter  Managing parameter tiers",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-08-11T02:09:35+03:00'>11 Aug 2021</time><a class='article__image' href='/aws-ssm-parameter-store'> <img src='https://user-images.githubusercontent.com/26498433/128895114-720e4bb7-e2af-49d0-9815-1b2ec447d119.png' alt='AWS Parameter Store 적용하기'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/aws-ssm-parameter-store'>AWS Parameter Store 적용하기</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "나홀로 제주도 여행 후기",
      "category" : "",
      "tags"     : "일상 and 생각",
      "url"      : "/%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%9C%EC%A3%BC%EB%8F%84-%EC%97%AC%ED%96%89-%ED%9B%84%EA%B8%B0",
      "date"     : "Aug 9, 2021",
      "content"  : "이번 나홀로 여행은 금요일, 평소같았다면 일주일이 벌써 끝났냐며 주말만을 기다리느라 일에 집중하지 못할 하루였겠지만, 회사 차원에서 급하게 전체 휴일로 지정되어 평일의 여유(?)를 만끽할 수 있게 되었다.고등학생 때 수학여행으로 온 이후로 성인이 되어서는 처음 오게된 제주도이기에 어디를 가야할까, 뭘 해야할까 고민이 되기도 했지만, 지금의 삶이 너무 팍팍한지라 이렇게 나만의 시간이 주어진 것만으로도 감지덕지였다.이렇게 계획 없이 가도 되나 싶을 정도로 정해진 것이 없었다. 여행 전날 우도에서 바이크를 타야겠다고 결심했지만 생각보다 쨍한 햇빛과 습도를 경험하니 도저히 엄두가 나지 않았다. 오히려 정해진 것들이 없어서 스트레스 없이 온전히 나만의 시간을 즐길 수 있었다고 생각한다.제주 공항에 내리자마자 월정리 해변으로 떠났다. 하얗게 펼쳐진 모래사장과 제주도만의 검은 현무암이 적절히 조화를 이루면서 에메랄드 물빛이 햇빛에 아름답게 빛나는 것을 도와주는 듯 했다. 해변에 자리를 잡고 앉아서 책이라도 좀 읽어볼까했지만, 내리쬐는 햇빛과 습도에 압도되어 무작정 해변 도로를 따라 걸었다. 작년 여름부터 애용해오고 있는 검은 양산의 보호를 받으며 조금 걸으니 쉴만한 정자를 발견했고, 그 곳에서 한숨 돌리며 누워서 책을 읽다가 잠시 눈을 붙였다. 아침 일찍 비행기를 타기 위해 잠을 많이 못잤더니 더 달콤했고, 이 시간에 이렇게 좋은 배경을 주변에 두고 여유를 부릴 수 있어 행복했다.이번 여행에는 책을 한 권 들고 갔다. 가수 윤종신님의 산문집인데, 그동안 작곡하신 곡들에 대한 비하인드 스토리와 생각들을 담은 내용의 책이다. 많은 내용들에 공감하며 마음에서 쉽게 잊혀지지 않는 구절들은 밑줄까지 쳐가면서 읽었는데, 지금도 가장 먼저 떠오르는 내용은 - 그런 윤종신님 조차도 본인이 가는 길에 대해서 고민하며 흔들린다는 것이다.  때로는 괜찮을 거라고 애써 미소 지으며 못 본 척 눈을 감는 것보다는 내 앞에 들이닥친 문제를 똑바로 응시하고 그 까마득한 오르막길을 뚜벅뚜벅 걸어올라가는 게 정답일 수도 있어요. 어쨋든 끝은 있을 테니, 어디로 가든 얼마나 걷든 결국에는 정상에 도착할 테니, 내가 어디쯤 왔는지 돌아보면서 전전긍긍하고 앞으로 얼마나 남았는지 내다보면서 노심초사하기보다는 나의 한 걸음 한 걸음에 집중하는 게 훨씬 더 현명한 자세일지도 몰라요.우연히 가져온 책이 빠르게 읽혀 자신감을 얻기도 했고, 요즘따라 남의 글을 읽는게 너무 재밌어서 그랬는지 첫째날을 마무리하기 전, ‘소심한 책방’이라는 독립서점을 들렀다.윤종신님의 책을 읽으며 멀지 않은 미래, 내가 3, 40대가 되었을 때를 한 번 상상해보게 되었다. 그러던 중  ‘흰머리 휘날리며, 예순 이후 페미니즘’이라는 책과 ‘글쓰기의 최전선’이라는 책 2권을 구매했는데, 첫번째 책은 예순이 지난 작가의 입장에서 느끼는 것들, 특히 노인들에 대한 사회의 인식과 노인의 입장에서 많은 생각을 해보게 해주었다(다시 돌아보니 ‘나이든다는 것은 무엇일까?’ 라는 질문을 가지고 곱씹어보며 책방을 나온 것 같다). 사실 어려운 말들이 너무 많아서 빠르게 흝듯이 읽게 되었다. 나중에 천천히 다시 읽어봐야겠다.비자림을 걷던 도중 바람이 잘 부는 곳에 자리를 잡고 책을 읽는 느낌은 잊지 못할 것 같다두번째 책은 요즘의 내 삶과도 연관이 있을 수 있는데, 글쓰기 수업과 학습 공동체를 이끌고 계신 작가님의 책이었다. 아직 읽고있는 중이지만 나처럼 글을 쓰는 것을 망설여하고 어색해하는 다른 학자(라고 여기서는 부른다)들의 사례들을 보며 마음의 위안을 얻는 중이다.질문, 질문, 또 질문이번 여행에는 딱히 정해진 목적도 없었고, 그렇다고 어떤 고민에 대한 해답을 얻고자 떠난 것도 아니었다. 오히려 그동안 부족했던 멍때리기(?)와 꼬리에 꼬리를 무는 사유, 그런 것들에 대한 시간들을 온전히 누리고 싶었다. 이런 덕분에 나에게 주어진 혼자만의 시간들 속에서 여기저기 흩어져있던 생각의 조각들을 이어붙여보기도 하고, 정답없는 물음도 던져보았다.‘나는 왜 질투를 느끼는 걸까?’‘나는 어떤 사람일까?’‘돈은 어떻게 버는 걸까? 왜 벌어야하지?’제주도의 파란 하늘과 양 옆으로 펼쳐진 돌담길을 걷다보면 자연스럽게 주문처럼 이런 정답이 없는 질문들을 머릿 속에서 주문처럼 외웠다. 이 글을 쓰고 있는 지금도 그럴듯한 정답 조차도 생각해내진 못했지만, 이런 질문들에 답하기 위해 파고드는 생각들을 관찰하고 만끽하는 이 과정이 너무나도 즐겁다. 윤종신님의 책에서처럼 이런 질문들의 답들도 흘러가는 시간 속의 내 위치에 따라 변할 것이다. 어쩌면 지금 답을 알아냈다고 생각한 것들도 언젠가는 다시 의문을 던지며 어딘가의 길을 걷고있는 날이 오겠지?눈물 젖은 해물 라면을 드셔보셨습니까?평범한 먹방 영상을 촬영하고 있다가 봉변(?)을 당했다…!여행 둘째날, 점심을 먹기 위해 성산일출봉 근처에 있는 식당에서 해물 라면이 먹고싶어 자리에 앉았다.옆 테이블에는 어린 두 딸과 부부가 있었는데, 아버지로 보이는 분이 딸들에게 그들이 진지하게 듣기에는 다소(?) 깊이가 있는 연설아닌 연설을 하고 계셨다. 저 나이 때의 우리 아버지가 나에게 해주셨던 이야기들을 떠올리며 두 딸의 지루함에 깊은 공감이 되어 무심하게 라면 속의 조개를 골라먹고있었는데,‘이 세상에는 많은 사람들이 살고 있지? 그 사람들이 각자 가지고 있는 생각들이 있을텐데, 우리 주희랑 민희가 가지고 있는 생각들이 무엇보다도 중요하다는 것을 잊지 말아야 해. 이 생각 저 생각들에 흔들리지 않고 내가 가지고 있는 것에 집중할 수 있는 거.’아버지의 나긋나긋한 목소리와 함께 무언가가 내 마음을 휘젓고 지나가버렸다. 제주도의 한 식당에서 두 딸의 아버지가 자식들에게 해주고 싶었던 한 메세지가 우연히 서울에서 혼자 여행온 한 청년의 마음의 종을 울리다니.급하게 면만 건져먹고 일어섰다. 밥도 먹고 가라는 주인 아주머니의 따뜻한 정을 뒤로한 채 급하게 계산을 하고 나가려다가, 복잡했던 내 마음에 큰 울림을 주신 그 아버지에게 고마운 마음을 표현해야할 것 같아서 쭈뼛쭈뼛 다가가 감사하다는 맥락없는 말만 급하게 던지고 식당을 나왔다. 가슴 속에 뜨거운 무언가를 뱉어내야할 것 같아서 눈물을 조금 뱉어냈다.최대한 그 식당에서 멀어지기위해 걸음을 재촉하며 이 감정과 상황들을 들여다보았다. 처음보는 두 딸의 아버지의 말에 무엇이 나를 이토록 걷게 만들었을까. ‘나만의 생각은 뭐지?’, ‘나도 내 생각은 가지고 있는데?’나름의 방어적인 생각도 해보고 단어들에 대해서 열심히 생각해보았지만, 끝내 정답은 찾지 못했다. 그냥 요즘 좀 울고싶었던 걸까? 뭐였을까? 아무튼 그런 아버지를 두 딸들은 자부심을 가져도 될 것 같다.우리 아버지도 나에게 이런 의미심장한 설교(?)를 많이 해주시곤 하셨는데, 두 딸의 반응과 나도 별 차이가 없었던 것 같다. 이제는 그런 말씀을 해주셨던 아버지의 마음도 조금이나마 이해가 되고, 서로 가지고있는 생각들을 친구처럼 나눠보고싶다. 더 많이 표현해야하지만 쉽지 않다. 어머니 아버지 사랑해요.일상으로 복귀하며월요일이 다가오기 전, 혼자만의 시간들 속에서 들었던 생각들과 감정들을 그대로 흘려보내기 싫어서 무작정 컴퓨터 앞에 앉기는 했는데, 어떻게 마무리해야할지 모르겠다. 여행 잘 다녀왔냐는 팀원들의 질문에 개운하게 웃으며 인생의 정답을 찾은 마냥 대답하기에는 뭔가 아직 찝찝한게 많다. 실제로 속이 그렇다고 많이 편해진 것도 아니고.그럼에도 하나 확실하게 생각드는건 ‘나는 완전하지 않은 존재이고 흔들릴 것’이라는 것이다. 충분히 부정하고싶고 인정하기 싫은 말이지만, 이것을 인정했을 때 마음이 한결 나아지는 것을 경험했다. 결국엔 이런 몸을 이끌고 인생을 살아가야한다면, 이런 나라도 아끼고 사랑하며 조금이라도 사람들에게 좋은 에너지를 줄 수 있다면 얼마나 갚진 인생일까?! 안좋은 감정과 생각들, 피하지말고 좀 더 부딪히자.젊음의 매 순간이 기회라는 것을 잊지 말자.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-08-09T02:44:35+03:00'>09 Aug 2021</time><a class='article__image' href='/%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%9C%EC%A3%BC%EB%8F%84-%EC%97%AC%ED%96%89-%ED%9B%84%EA%B8%B0'> <img src='https://user-images.githubusercontent.com/26498433/128637965-9300d08a-189b-48e8-902c-39e1e44e0955.png' alt='나홀로 제주도 여행 후기'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%9C%EC%A3%BC%EB%8F%84-%EC%97%AC%ED%96%89-%ED%9B%84%EA%B8%B0'>나홀로 제주도 여행 후기</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "글또 6기를 시작하며",
      "category" : "",
      "tags"     : "글또 and 회고",
      "url"      : "/%EA%B8%80%EB%98%90-6%EA%B8%B0%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0",
      "date"     : "Aug 1, 2021",
      "content"  : "  🎵 Aespa - Next Level 무한 반복중 🎵‘글또’에 참여하게된 이유와 앞으로의 다짐을 기록해봅니다.📌 글또란?📌 글또를 지원하게 된 이유는?📌 현재의 나는?📌 다짐📌 맺으며📌 글또란?  ‘글쓰는 또라이가 세상을 바꾼다’의 줄임말로, 개발자 글쓰기 모임이라고 설명하는게 나을 것 같다.  ‘개발자들의 글쓰기 역량을 강화하고, 글을 꾸준히 쓸 수 있도록 돕는 커뮤니티’로써, 현재 6기까지 운영중인 흥하는(?) 동아리이다!📌 글또를 지원하게 된 이유는?  이전에 함께 일했던 종윤님(재그지그)께서 정기적으로 블로그 글을 쓰고 피드백을 주고받는 글쓰기 동아리를 하신다는 말을 듣고 ‘그런게 있구나’ 하고 있다가, 아래와 같은 이유들로 용기를 내어 직접 지원하게 되었다.여행은 영상으로, 개발은 글로.여행 당시의 사진보다는 무심하게 찍어놓았던 동영상이 그 당시를 회상하기 좋게 해주듯이, 개발하며 배운 것들이나 프로젝트를 진행하며 겪었던 우여곡절들은 글로 남기는 것이 더 효과적일 것이라고 생각했다.심지어는 완료한 태스크가 아니더라도 현재 고민하고 있는 것들이나 생각들도 글로 남겨놓는다면, 미래의 내가 다시 읽었을 때의 감회가 새로울 것 같았다. 새로운 고민이나 재미있는 생각들이 들 때, 이것을 바로 글을 통해 기록하게되는 근육을 만들고 싶었다.그러기에 적합한 헬스장(?)은 바로 ‘글또’였다.끝까지 집중력 잃지않고 읽게되는 개발 문서가 있다?!회사 내에서 다양한 개발 파트를 잇는 업무를 많이 하다보니, 시스템의 아키텍처를 문서화하거나 프로젝트의 진행 과정을 문서화해야하는 일이 많았다(나중에 이것들 관련한 썰을 풀어도 좋을 것 같다!).기술 관련 문서를 작성할 때면, 미래의 이 문서를 읽게될 분들이나 현재 팀원 분들이 과연 어떻게 읽고있을지 상상을 하며 이해하기 쉬운(?) 글을 쓰고자 나름의 노력을 했지만 쉽지는 않았다(끝까지 읽어나가기도 쉽지 않았고, 독자를 많이 고려하지 못했던 것 같다).글또 활동을 통해 다른 분들의 글을 읽으며 현장에서의 생각들도 간접 경험해보고 싶고, 내가 쓴 글들에 대한 피드백도 받으며 좀 더 객관적인 시선으로 내 글을 바라보고싶다.📌 현재의 나는?2021년 상반기를 간단히 돌아보자      안드로이드 개발        올해는 총 25번의 배포를 진행했으며, 나를 포함하여 2명의 안드로이드 개발팀(?)이 유지되었다. 서비스의 주요 기능 중 하나인 CCTV 스트리밍 관련한 안정화 작업과 새로운 주요 기능인 ‘움직임 감지/녹화’를 추가하였다. 해당 기능들은 프로젝트 형식으로 진행되었는데, webRTC라던지 안드로이드 멀티쓰레딩 관련한 공부가 필요했다. 스터디를 진행하며 배운점이 많았는데, 막상 돌아보니 기록이 없어서 아쉽다ㅠㅠ        뷰어 앱 출시 준비    기존에는 CCTV 영상을 수신하는 웹페이지를 개발하여 카카오톡에서 버튼을 눌러 사용하는 패턴이었는데, 도기리포트라는 부가 기능이 배포되면서 두 기능 사이의 전환이 불편(버튼을 새롭게 눌러 표시된 웹뷰를 다시 들어가야함)하고 매끄럽지 않았다.        이러던 중 우리의 비즈니스 모델과 사용자층 확대를 위해  CCTV 영상 수신, 도기리포트 기능에 커뮤니티 기능을 추가한 새로운 앱을 출시하기로 결정하게 되었고(마케터분이 개발 추진에 많은 자극을 주셨다), 이를 위한 새로운 아키텍처를 구상하는 중이다.        머신러닝 프로젝트    우리의 핵심(?) 기술인 반려동물 행동 인식 모델을 작년부터 여러 시행착오를 겪으며 연구하고 있긴한데, 프로덕트에 적용하기에는 아직 멀다고 판단했다. 하지만 도기리포트를 출시하면서 사용자분들과 우리 기술의 접점을 조금씩 찾아가고 있고, 이를 위한 2주 단위 개인별 프로젝트를 진행하고있다. 덕분에 파이토치나 기본 영상 처리에 익숙해지고있다.  요즘 내 머릿속에 떠도는 생각들      부정적인 피드백에 스트레스를 좀 더 받고 예민해진 것 같다. 방어기제로써 부정적 피드백을 받을만한 의견을 말하거나 아이디어를 공유하지 않는 때가 있는데, 분명한 것은 스타트업 내에서 내 자존감을 지켜봤자 좋을 것은 없다는 것이다. 가만히 있는다고 나아지는 것은 없고, 부딪혀야 한다.        흘러가고 지나가는 생각들이 참 많다. 찬찬히 돌아보며 음미하고싶은데, 이것들의 손실율(?)을 낮추고싶다.        요즘 하는 생각인데, 지금 나의 무기력감과 부정적인 에너지도 결국에는 특정 호르몬에 의한 것이 아닐까싶다. 무슨말인고하니, 동일한 상황이나 부정적인 생각들도 마음가짐을 조금 다르게 먹거나 환경이 조금이라도 나아지면 해결되는 경우가 있다는 것이다.  📌 다짐작성 하고싶은 주제      바로 떠오르는 건 요즘 공부중인 안드로이드의 멀티쓰레딩 관련한 내용들. 동료분들과 함께 스터디를 진행하며 현재 서비스에 적용된 성능을 많이 최적화하고 있다. 단순 개념들 뿐만 아니라, 우리가 가진 문제를 해결하기 위해 했던 작업들(성능 테스트라던지)을 기록으로 남기고싶다.        스타트업을 운영하면서 겪게 되는 선택의 순간에 대한 기록을 해보고싶다. 글을 적다보면 생각도 정리되고, 이후에 보면 ‘이런 때도 있었지’하고 흐뭇해하지 않을까 싶다. 생각이라는 것이 미래에는 당시의 감정을 고스란히 기억하기에는 많은 것들이 바뀌어버리기 때문에 소위 ‘추억 보정’이 된다던지 왜곡될 수 있는 것을 피하고 싶다.        이외에도 최근까지 TIL(Today I Learned)를 나름 실천했왔는데, 이것들을 비슷한 주제들끼리 모아서 하나의 글로 완성시켜보고 싶다. 이 부분은 주로 백엔드나 AWS 관련된 내용들에 대한 것이 많지 않을까 싶다. DA 시험을 준비했었지만 아쉽게 마무리되었던 마음에 조금이라도 위로가 될 것 같다.  안정적인(?) 업로드를 위한 글 작성 파이프라인  이대로만 되면 참 좋을텐데…      평상시 : 샤워하는 순간에 드는 생각들, 자기 전, 스터디를 하면서 스쳐지나가는 조그만 것이라도 사용될 수 있도록 글감 수집하기조금씩 쌓이고 있다!        퇴근 후 : 집에 오는 버스에서 오늘 한 일들을 정리하곤 하는데, 업무를 정리하며 글로 적을만한 것들을 정리 + 글감을 정했다면 초안을 조금씩 기록해보기        주말 혹은 길게 여유가 있는 시간에 : 평소에 조금씩 적어놓은 초안을 구체화하기(라고 적었지만 말이 참 쉽다…ㅋㅋ)  뭔가 형식적으로 적어놓은 것 같다…! 이렇게 적어놓고 주말부터 ‘뭐 적지’하고 앉아있을 수도 있다ㅋㅋ 하지만 나에게 글또를 통한 글 쓰기는 ‘내가 뭔가 생산적인 것을 했다’라는 뿌듯함을 주고 회사 생활을 하며 채워지지 않은 생산욕(?)을 충족시켜 줄 것이라는 믿음으로 시작해보려고 한다!📌 맺으며이 글을 쓰는 동안에도 막상 해보니 초반의 생각들과 다른 점들이 있는 것 같다. 문장과 문장을 잇는 것 조차도 고민이 필요했고, 단어의 선택이나 표현이 단조로운 것 같다.글을 쓰기에 먼저 글을 많이 읽어보는 것도 중요하다는 말이 맞는 것 같다. 평소에 개발 관련 글을 읽더라도 몰입이 잘되는 것과 힘든 것들이 있었는데, 이것들의 공통점들에 신경을 써봐야겠다.우리 인생 파이팅. 나 자신도 사랑하자.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-08-01T23:41:00+03:00'>01 Aug 2021</time><a class='article__image' href='/%EA%B8%80%EB%98%90-6%EA%B8%B0%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0'> <img src='https://user-images.githubusercontent.com/26498433/127769541-d7d7ec0a-ff48-41dd-8458-452f7b6defd8.png' alt='글또 6기를 시작하며'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/%EA%B8%80%EB%98%90-6%EA%B8%B0%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0'>글또 6기를 시작하며</a> </h2><p class='article__excerpt'>근데 2021년 중간 회고를 곁들인.</p></div></div></div>"
    } ,
  
    {
      "title"    : "현재 실행중인 앱의 액티비티 스택 확인하는 방법",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-activity-stack",
      "date"     : "Jul 16, 2021",
      "content"  : "1. 개요  액티비티 전환간의 리소스 할당과 해제 타이밍이 중요한 기능을 테스트하던 도중, 어떻게 효율적으로 확인할 수 있을까? 하는 생각에서 검색을 시작하였다.  기존에는 생명주기 메소드(onCreate, onResume 등)에 무식하게(?) 로그를 추가해서 확인했었는데, 너무 비효율적이었다.  그러던중 adb 터미널 명령어로 확인이 가능하다는 것을 확인했다.  명령어는 아래와 같다.$adb shell dumpsys activity activities | sed -En -e &quot;/Stack #/p &quot; -e &quot;/Running activities/,/Run #0/p&quot;  터미널에 위의 명령어를 입력하면 아래와 같은 결과를 확인할 수 있다.Stack #1:  Running activities (most recent first):    TaskRecord{4844b83d0 #159 A={앱 패키지명}} U=0 StackId=1 sz=2}      Run #1: ActivityRecord{e348c0dd0 u0 {앱 패키지명}/{앱 패키지명}.{액티비티2} t159}      Run #0: ActivityRecord{e23e359d0 u0 {앱 패키지명}/{앱 패키지명}.{액티비티1} t159}Stack #0:  Running activities (most recent first):    TaskRecord{2849e2dd0 #143 A=com.sec.android.app.launcher U=0 StackId=0 sz=1}      Run #1: ActivityRecord{c99b3f1d0 u0 com.sec.android.app.launcher/.activities.LauncherActivity t143}    TaskRecord{406b61bd0 #146 A=com.android.systemui U=0 StackId=0 sz=1}      Run #0: ActivityRecord{72888ffd0 u0 com.android.systemui/.recents.RecentsActivity t146}2. 참고  ADB란?",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-07-16T00:44:35+03:00'>16 Jul 2021</time><a class='article__image' href='/android-activity-stack'> <img src='images/android_default.png' alt='현재 실행중인 앱의 액티비티 스택 확인하는 방법'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-activity-stack'>현재 실행중인 앱의 액티비티 스택 확인하는 방법</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "안드로이드 ABI",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-abifilter",
      "date"     : "Jun 16, 2021",
      "content"  : "  ffmpeg 라이브러리를 사용하면서, 일부 기종에서는 특정 라이브러리를 찾지 못하는 에러(UnsatisfiedLinkError)가 리포팅되는 것을 인지하게 되었다.  요놈의 원인은 무엇이며, 왜 발생한 것인지를 알아보고자 한다.1. abi?  Android ABI  Application Binary Interface의 줄임말.  출처 : 야토팍 블로그안드로이드 디바이스는 제조사의 사정에 따라서 입맛대로 CPU를 골라 쓸 수 있다. 이쪽에서 가장 대표적인 ARM을 비롯하여 MIPS, x86을 지원한다. 이들이 사용하는 명령 세트는 모두 다르며, 각 아키텍쳐 – 명령세트의 조합은 자신들에게 맞는 ABI(Application Binary Interface)를 갖는다.ABI란, 런타임에 시스템과 앱의 머신코드가 어떻게 상호작용할지를 기술한 인터페이스이다.  so파일을 로딩하는 경우, 머신코드-아키텍쳐에서 사용하는 ABI와 일치해야 구동이 가능하다. ARM 칩에서 x86 머신코드를 네이티브로 실행할 순 없지 않은가?ABI는 보통 이런 정보들을 포함하고 있다.- 머신코드가 사용해야 하는 CPU 명령 세트.- 런타임에 사용할 메모리 로드/스토어 endianness.- ABI에서 지원하는 실행가능한 바이너리 포맷(프로그램,  shared lib)- 당신의 코드와 시스템간의 데이터 전달을 위한 다양한 컨벤션. 이 컨벤션들은 시스템이 함수호출 시 스택과 레지스터를 어떻게 사용할지 뿐만 아니라 alignment 제약사항까지 포함한다.- 일반적으로 매우 특정한 라이브러리들에서, 런타임시 당신의 머신코드에서 사용가능한 함수 심볼의 목록.  갑자기 학부 때 수강한 컴퓨터 구조 수업이 주마등처럼 지나간다ㅎㅎ 그래도 익숙한 단어들이 보이는걸 보니 대학 등록금이 헛되지는 않았구나!2. 개발중인 앱이 32-bit와 64-bit CPU를 모두 지원하는지 확인해보자  Ref : https://www.youtube.com/watch?v=E96vmWkUdgA  안드로이드 스튜디오 메뉴의 Build &amp;gt; Anaylze APK... &amp;gt; 해당 앱의 apk 파일 선택  lib 폴더 선택 후 하위 폴더 확인  armeabi, armeabi-v7a, x86 폴더가 있을 경우, 해당 앱이 32-bit native app component를 가지고 있다는 의미.  arm64-v8a, x86_64 폴더의 경우, 해당 앱이 64-bit를 지원한다는 의미.  2014년 Lollipop 버전부터 64-bit 기기를 지원하기 시작하면서, 2021년까지 플레이스토어의 모든 앱들이 64-bit를 지원하도록 앱을 수정하도록 하는 요구함.  가장 간단한 방법은 기존 32-bit 라이브러리(x86, armeabi-v7a)에 64-bit 라이브러리(x86_64, arm64-v8a)를 추가하는 거지만, 이렇게 되면 앱 크기가 너무 커짐.  이러한 경우를 위해 구글에서는 Android App Bundle이라는 새로운 배포 형식(publishing format)을 지원함.  App Bundle로 앱을 배포하면 각 기기에 필요한 라이브러리만 다운로드되도록 해줌.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-06-16T01:39:35+03:00'>16 Jun 2021</time><a class='article__image' href='/android-abifilter'> <img src='https://user-images.githubusercontent.com/26498433/122062932-ce4c7e80-ce2a-11eb-83e1-249252132119.png' alt='안드로이드 ABI'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-abifilter'>안드로이드 ABI</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "안드로이드 스튜디오 프로젝트에 자리잡은 .idea 폴더는 무엇이며 어떻게 관리할까?",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-idea-folder",
      "date"     : "Jun 11, 2021",
      "content"  : "1. 문제 인식      몇일 전(?)부터 코드를 pull 받고 push할 때마다 .idea 폴더 내의 잡다구리한 파일 때문에 신경이 쓰이기 시작했다. 직접적인 안드로이드 코드도 아니고, 실행에 영향이 있는 코드도 아니어서 뭔가 넘어가기도 애매하고 신경쓰기도 애매한 상황이 되었다.        나 혼자 관리하는 코드도 아니고 어쨌든 프로젝트를 관리하는 입장에서 이런 상황을 넘어갈 수만은 없어서 상대적으로 시간이 비는 금요일 저녁(?)에 한 번 어떤 놈인지도 알아보고 해결도 해보고자 한다.  2. .idea ?  .idea 폴더는 Intellij 계열의 IDE(Android Studio, WebStorm 등)에서의 설정값들을 저장한다.  이 중에는 프로젝트별로 공통된 파일도 있지만 IDE를 사용하는 사용자별로 다른 파일들도 존재하기 때문에 해당 파일들이 github등으로 다른 개발자들과 공유가되면 곤란(?)한 상황이 발생할 수도 있다.2.1 .idea에 저장되는 파일들  assetWizardSettings.xml : 가장 최근에 추가된 아이콘 파일을 저장한다.3. 관리 방법  .gitignore에 ./idea/ 를 추가해주었다.  local이 아닌 git 상에서의 .idea 파일을 삭제하였다(로컬 X)  기본적으로는 안드로이드 스튜디오로 프로젝트를 생성하면 root 경로와 app 경로에 각각 하나씩 .gitignore 파일을 생성해준다.  게다가 .idea 폴더 내의 몇 개 파일에 대해서 기본적으로 추가해주기도 한다.*.iml.gradle/local.properties/.idea/workspace.xml/.idea/libraries.DS_Store/build/captures.externalNativeBuildRef  Deep dive into .idea folder in Android Studio  Android project settings Git ignore file and .idea folder problem  I have .idea in gitignore, but it is still in local changes",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-06-11T19:39:35+03:00'>11 Jun 2021</time><a class='article__image' href='/android-idea-folder'> <img src='https://user-images.githubusercontent.com/26498433/121682834-890d1180-caf7-11eb-9ad0-0a31ae3f5278.png' alt='안드로이드 스튜디오 프로젝트에 자리잡은 .idea 폴더는 무엇이며 어떻게 관리할까?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-idea-folder'>안드로이드 스튜디오 프로젝트에 자리잡은 .idea 폴더는 무엇이며 어떻게 관리할까?</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "안드로이드 ANR 분석하기",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-anr-analysis",
      "date"     : "Jun 8, 2021",
      "content"  : "1. ANR이란?- Android 앱의 UI 스레드가 너무 오랫동안 차단되면 &#39;ANR(애플리케이션 응답 없음)&#39; 오류가 트리거됩니다.- ANR은 UI 업데이트를 담당하는 앱의 기본 스레드가 사용자 입력 이벤트 또는 그림을 처리하지 못하여 사용자 불만을 초래하므로 문제가 됩니다.2. 스택 트레이스 로그 분석2.1 스택 트레이스 로그 형태&quot;{스레드 이름}&quot; prio={스레드 우선순위} tid={스레드 ID} {스레드 상태}2.2 스레드 상태(Android 기준)  running - executing application code(실행중)  sleeping - called Thread.sleep()  monitor - waiting to acquire a monitor lock(다른 쓰레드가 작업을 마치기를 기다리는 중)  wait - in Object.wait()  native - executing native code  vmwait - waiting on a VM resource  zombie - thread is in the process of dying  init - thread is initializing (you shouldn’t see this)  starting - thread is about to start (you shouldn’t see this either)2.3 내가 직면했던 상황모든 ANR의 리포트된 케이스들이Broadcast of Intent{...cmp=com.petpeotalk.dogibogi_android/com.google.firebase.iid.FirebaseInstanceIdReceiver}로 끝나길래, 지금까지는 이게 FCM 관련한 에러인 줄 알고 FCM 관련한 이슈로 원인을 분석하고 있었다.하지만 각 케이스들의 스택 트레이스를 들여다보니Activity A에서 푸시 메세지(FCM)를 수신하는 과정에서 ANR이 발생하기 때문에 FCM 관련한 것으로 리포팅 되었던 것 이었고,이 과정에서 메인 스레드가 WAITING 상태로 갇히게 되는 것을 발견하였다.Activity A에서는 푸시 메세지를 받으면 작동중인 스레드를 종료하기위해 메인 스레드에서 join()을 사용하는데,여기서 스레드가 종료되지 않으면 메인 스레드 자체가 아무것도 안하며 멈추게 되는 것이다.따라서 join()이 실행되는 타이밍과 조건에 집중해서 전체적인 로직을 일부 수정하게 되었다.3. 느낀점      이래서 멀티쓰레드 관련한 책들이 도서관에 많았던 거구나… 섬세한 작업인 것 같다.        이제 스택 트레이스 로그를 봐도 조금은 알아볼 수 있을 것 같다.  Ref  ANR  스레드 덤프 분석하기  스레딩을 통한 성능 개선",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-06-08T15:39:35+03:00'>08 Jun 2021</time><a class='article__image' href='/android-anr-analysis'> <img src='https://user-images.githubusercontent.com/26498433/121179133-4c90aa00-c89a-11eb-8baa-5322f63a97d2.png' alt='안드로이드 ANR 분석하기'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-anr-analysis'>안드로이드 ANR 분석하기</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "AWS DA 덤프 문제 풀이 - SQS",
      "category" : "",
      "tags"     : "aws",
      "url"      : "/aws-da-sqs",
      "date"     : "May 20, 2021",
      "content"  : "AWS DA 덤프 문제 풀이 - SQS문제The development team at an analytics company is using SQS queues for decoupling the various components of application architecture. As the consumers need additional time to process SQS messages, the development team wants to postpone the delivery of new messages to the queue for a few seconds.As a Developer Associate, which of the following solutions would you recommend to the development team?애널리틱스 회사의 개발팀에서는 어플리케이션 아키텍처의 여러 구성 요소들을 decoupling하기 위해 SQS 큐를 사용하고있다. consumer에서 SQS 메세지를 처리하기위한 추가적인 시간을 필요로하기 때문에, 개발팀에서는 큐로 들어오는 새로운 메세지를 몇 초 동안 늦추고싶어한다.DA로써, 다음 중 어떤 방식을 추천하는가?  Use FIFO queues to postpone the delivery of new messages to the queue for a few seconds  Use visibility timeout to postpone the delivery of new messages to the queue for a few seconds  Use delay queues to postpone the delivery of new messages to the queue for a few seconds  Use dead-letter queues to postpone the delivery of new messages to the queue for a few seconds설명https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-how-it-works.htmlAmazon Simple Queue Service (SQS) is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications. SQS offers two types of message queues. Standard queues offer maximum throughput, best-effort ordering, and at-least-once delivery. SQS FIFO queues are designed to guarantee that messages are processed exactly once, in the exact order that they are sent.Delay queues let you postpone the delivery of new messages to a queue for several seconds, for example, when your consumer application needs additional time to process messages. If you create a delay queue, any messages that you send to the queue remain invisible to consumers for the duration of the delay period. The default (minimum) delay for a queue is 0 seconds. The maximum is 15 minutes.via -https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-delay-queues.htmlSQS, Lambda를 이용한 작업 대기열 만들기용어 정리Producer  처리할 작업 메시지를 SQS에 등록Trigger  큐 대기열에 있는 메시지들을 조회하기 위해 CloudWatch의 스케줄 이벤트를 이용하여 매분마다 Lambda Consumer 실행Consumer  Lambda Consumer는 큐 대기열에 있는 메시지 목록을 조회하여 각 메시지를 Lambda Worker에서 처리할 수 있도록 실행Worker  메시지를 받아 작업을 처리하고 해당 메시지를 삭제dead-letter queue  메시지가 성공적으로 처리되지 못한 조건을 설정하고, 성공적으로 처리되지 못한 메시지들을 따로 처리할 수 있도록 도와줌.  원본 큐와 동일한 형태여야함.visibility timeout      SQS에서 메시지는 특정 컴포넌트에 전달된 뒤 자동으로 삭제되지 않음. 다른 컴포턴트에서 중복된 메세지를 전달받을 수 있는 문제가 있기 때문에, 한번 전달된 메시지는 visible timeout에 설정된 일정 시간 동안은 다시 전달되지 않도록 함. 따라서 메시지를 받아서 visibility timeout 내에 작업을 완료하고 메시지를 delete해야함.    AWS SQS(Simple Queue Service) 소개  설명Use FIFO queues to postpone the delivery of new messages to the queue for a few secondsSQS FIFO 큐는 메시지가 들어온 순서대로 딱 한 번만 처리되도록 하기 위해 설계되었음. FIFO 큐로 메시지 들어오는 것을 지연하거나 할 수는 없음.Use dead-letter queues to postpone the delivery of new messages to the queue for a few secondsDead-letter 큐는 별도의 큐를 생성하여 다른 큐에서 처리하지 못한 메시지를 받아옴. Dead-letter 큐는 우리가 운영하는 서비스의 디버깅을 할 때 유용함(실패한 케이스들을 모두 받아들이기 때문). delay하는 기능은 없음.Use visibility timeout to postpone the delivery of new messages to the queue for a few secondsVisibility timeout은 다른 consumer들이 해당 메시지를 처리하지 못하도록 설정된 시간임. default로는 30초이고 최소 0초로 설정할 수 있음. visibility timeout으로 delay처리를 할 수는 없음.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-05-20T00:34:35+03:00'>20 May 2021</time><a class='article__image' href='/aws-da-sqs'> <img src='https://lh4.googleusercontent.com/YynP3XW9QCADQRk1TU7CQ0WfQ8oKueALSWSIwtTrxa_yg2PXQH7oyCmNAbT4Sw7hXhC3AgM-JKo4RXuUUtVDlfaYOYX9QvqXAVkroIECYLBNc6tdkTlxss-kJ_m07CNEDLIzrBx6' alt='AWS DA 덤프 문제 풀이 - SQS'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/aws-da-sqs'>AWS DA 덤프 문제 풀이 - SQS</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "&lt;죽은자의 집청소&gt;를 읽고",
      "category" : "",
      "tags"     : "독서",
      "url"      : "/%EC%A3%BD%EC%9D%80%EC%9E%90%EC%9D%98-%EC%A7%91%EC%B2%AD%EC%86%8C%EB%A5%BC-%EC%9D%BD%EA%B3%A0",
      "date"     : "May 16, 2021",
      "content"  : "죽은자의 집청소(김완 지음)를 읽고…  형은 항상 현대 과학과 메마른(?)인간애로 버무러진 나를 구하기 위해 이런 책들을 추천해주곤 한다.  덕분에 적어도 주말에는 나, 주변 사람들을 돌아보며 어떤 삶을 살아가야할지 조금은 생각할 수 있게 된다.기억에 남는 부분이 책의 저자는 대학 시절 시(Poet)를 전공했다. 그래서 그런지 한 장 한 장 읽을 때마다 생각지도 못한 신선한 문구와 표현들에 감탄하곤 했다. 그냥 지나치긴 아까워서 몇 자 기록해놓고 생각날 때마다 꺼내봐야겠다.  ‘꽃’ 좋은 곳에서 영원히…  문밖에 있던 꽃다발을 이제는 완전히 텅 빈 지하 주택의 창가로 옮긴다. 이 창가라면 오후 한때나마 해가 머물다 갈 것이다. 여기에선 골목을 지나가는 사람들의 걸음과 먹이를 구하러 바비 길 건너는 고양이처럼, 쉼 없이 돌아가는 세상의 작은 부분일지언정 안심하고 바라볼 수 있다.내가 집을 정리하기 위해 머무는 내일까지라도 어두운 계단 구석 말고 부디 여기 해와 달이 비치는 창가로 와서 당신의 친구들이 바친 아름다운 꽃 향기라도 맡고 가시라.그리고 부디 꽃 좋은 곳에서 영원히…  어떻게 이런 세련된 비유를 사용할 수 있을까?  언뜻 보기엔 부촌의 언덕배기에 새로 지어올린 전형적인 고급 빌라다. 건물 현관에 청소와 소독 장비를 내리고 뒤에 있는 주차장 쪽으로 돌아가자 여기저기 금이 간 붉은 벽돌과 군데군데 바스러진 시멘트로 마감한 낡은 벽면이 드러난다. 리모델링 공사를 거쳐 전면부를 갈아내고 실내마저 새것으로 바꿨지만, 어째서인지 건물의 뒤쪽까지는 손보지 않았다. 흡사 청년의 가면을 쓰고 턱시도까지 차려입은 노인이 굽은 허리를 짐짓 꼿꼿이 세운 채 안간힘을 쓰며 활보하는 핼러윈의 뒤안길처럼 쓸쓸하다.  참으로 불가사의한 것이 있다면, 쓰레기가 극도로 쌓인 집엔 동전과 지폐가 아무 곳에나 흩어져 이리저리 나뒹군다는 점이다. 꽤 오랫동안 이런 집을 맡아왔지만 예외 사례를 찾기가 더 힘들다. 돈이 음식물에 뒤섞여 방바닥에 잔뜩 흩어져 있고 책상 위나 싱크대 위, 화장실을 가리지 않고 곳곳에 에넘느레하게 널브러져 있다. 심지어 탕수육 소스가 담긴 그릇이나 변기 안에서 동전을 끄집어낸 적도 있다. 마침 지진이라도 일어나 그대로 매몰되면 현행 화폐가 걸쭉한 전분 소스에 코팅되어 또렷하게 보존된 화석으로 발견될지도 모른다.돈과 쓰레기의 구별, 즉 가치 있는 것과 없는 것의 경계가 허물어져 자본주의적 특징을 무색하게 만드는 이 상황. 쓰레기를 모으는 이야말로 ‘황금 보기를 돌같이 하라’는 청빈 사상을 몸소 실천하는 군자인지도 모른다.이런 저런 생각들  사람은 아는 만큼 글을 쓰는 것 같다. 자연스럽게 묻어나온달까?  개발 문서도 이렇게 즐겁게 읽을 수 있다면(?) 얼마나 좋을까, 하는 생각을 잠깐 해봤다. 불가능할 것을 알지만 생각은 해볼 수 있지 않은가.  이 일을 하며 그 곳에 있던 사람을 이해해보려고 여러 질문을 꺼내는 작가, 결국 그 질문들이 자신에게 향하는 것이 인상깊었다. 작가님 만큼은 아니겠지만, 살면서 다른 사람의 생각과 상황을 이해하려 이리저리 배회하다보면 결국 나라는 사람을 좀 더 잘 알게 되곤 했던 것 같다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-05-16T18:33:35+03:00'>16 May 2021</time><a class='article__image' href='/%EC%A3%BD%EC%9D%80%EC%9E%90%EC%9D%98-%EC%A7%91%EC%B2%AD%EC%86%8C%EB%A5%BC-%EC%9D%BD%EA%B3%A0'> <img src='https://user-images.githubusercontent.com/26498433/127013139-7538581d-3c5a-4f1c-9779-f11d12d90745.png' alt='&lt;죽은자의 집청소&gt;를 읽고'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/%EC%A3%BD%EC%9D%80%EC%9E%90%EC%9D%98-%EC%A7%91%EC%B2%AD%EC%86%8C%EB%A5%BC-%EC%9D%BD%EA%B3%A0'>&lt;죽은자의 집청소&gt;를 읽고</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "안드로이드 RecyclerView의 notifyDataSetChanged(), notifyItemInserted() 에 대한 고려",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-notifydatasetchanged",
      "date"     : "May 14, 2021",
      "content"  : "1. 개요  RecyclerView의 Adapter가 그려주는 각 아이템들의 데이터에 변화(추가, 삭제, 수정 등)가 생겼을때, Adapter에 그려줘야하는 데이터에 변화가 생겼음을 알려줘야함.  이 경우, 다음과 같은 메소드들을 사용할 수 있음. 링크  예를들어 아이템이 추가된 경우, 대표적으로는 notifyDataSetChanged()와 notifyItemInserted()를 고민할 수 있을 것이다.2. notifyDataSetChanged() vs notifyItemInserted()  위의 메소드를 사용하면 모두 recyclerview에 정상적으로 아이템이 추가될 것이다.  하지만, 현재 Adapter가 그려주는 데이터의 수량과 특성을 고려하여야한다.  그려줘야하는 아이템이 많거나, 인덱스(position)을 명확히 할 수 있는 경우에는 notifyItemInserted()가 효율적이다.  notifyDataSetChanged()의 경우 LayoutManager가 모든 아이템을 다시 rebind해야하므로, 오버헤드가 클 수 있기 때문이다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-05-14T01:39:35+03:00'>14 May 2021</time><a class='article__image' href='/android-notifydatasetchanged'> <img src='https://user-images.githubusercontent.com/26498433/118092091-99ea3a80-b406-11eb-9bb6-dec35aace2aa.png' alt='안드로이드 RecyclerView의 notifyDataSetChanged(), notifyItemInserted() 에 대한 고려'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-notifydatasetchanged'>안드로이드 RecyclerView의 notifyDataSetChanged(), notifyItemInserted() 에 대한 고려</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "DialogFragment의 Life Cycle",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-dialogfragment-lifecycle",
      "date"     : "May 11, 2021",
      "content"  : "1. 개요  DialogFragment위에 기존의 목적 이상의 기능(canvas, view 전환 등)이 동작하다보니, life cycle을 제대로 알고 구현할 필요가 생겼음.2. Life cycle  공식 문서  일반적인 Dialog로써 사용한다면 신경쓸 필요가 없음.  Fragment의 life cycle과 유사함.onAttachonCreate(onCreateDialog))onCreateView(onActivityCreated)onStartonResumeonPauseonStoponDestroyViewonDestroyonDetach",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-05-11T15:39:35+03:00'>11 May 2021</time><a class='article__image' href='/android-dialogfragment-lifecycle'> <img src='images/android_default.png' alt='DialogFragment의 Life Cycle'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-dialogfragment-lifecycle'>DialogFragment의 Life Cycle</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "메모리 사용량이 많은 코드를 찾는 방법",
      "category" : "",
      "tags"     : "android",
      "url"      : "/android-profiler",
      "date"     : "May 4, 2021",
      "content"  : "1. 개요 📌  카메라 입력 이미지를 사용하는 로직을 구현하다보면 연산량이 많아서 그런지 현재 기준 상대적으로 저사양의 기종(ex. 갤럭시 노트3)들에서 ANR이 많이 발생한다.  로직상의 에러는 아닌데, 유난히 버벅이는 기기들에서의 상황을 해결하려다보니 좀 더 딥하게 원인을 분석할 필요가 생겼다.  GC 관련 로그가 찍히는 것을 보고 막연하게 메모리 에러라는 가정을 하고 해결해볼 방법을 생각해봤다.  이럴 땐 Android Studio에서 제공하는 profiler 기능을 활용하면 된다.예시2. 활용 방법 📌  Memory 영역 클릭 &amp;gt; 메모리 에러가 발생하는 것 같은 상황을 Record &amp;gt; 메모리가 많이 할당된 변수 타입 선택 &amp;gt; 오른쪽 클릭 후 ‘Jump to Source’ 선택  어떤 부분에서 메모리가 많이 사용, 할당되었는지 원인을 분석하는데에 실마리를 얻을 수 있다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2021-05-04T18:34:35+03:00'>04 May 2021</time><a class='article__image' href='/android-profiler'> <img src='https://user-images.githubusercontent.com/26498433/117010167-7d277600-ad27-11eb-816c-a723afb4aad6.png' alt='메모리 사용량이 많은 코드를 찾는 방법'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/android-profiler'>메모리 사용량이 많은 코드를 찾는 방법</a> </h2><p class='article__excerpt'>profiler 기능에 대하여.</p></div></div></div>"
    } ,
  
    {
      "title"    : "2020년 회고",
      "category" : "",
      "tags"     : "회고",
      "url"      : "/2020%EB%85%84-%ED%9A%8C%EA%B3%A0",
      "date"     : "Dec 31, 2020",
      "content"  : "1. 들어가며2019년 회고록을 적어야지…하고 생각했던게 지난 주 같은데… 어느덧 창업을 한 지도 어느덧 2년이 다되어가고, 정답지가 없는 상황들에 빠져 헤엄치다보니 나도 모르게 생겨버린 잔근육(?)들을 돌아볼 시간이 찾아왔다. 온라인에 업로드하는 것은 처음인지라 부족하지만, 어쨋든 2020년이 다 가기전에 빠르게 적어본다.2020년의 대표적인 이벤트* 학부 졸업(2020.02)  시원섭섭했던 대학생 시절이 끝났다. 이젠 진짜 현실이다.* 워드몬스터 프로젝트 중단(2018.9 ~ 2020.3)  2018년부터 한 교육 기업에서 안드로이드 개발과 프로젝트 매니저로 일해왔던 프로젝트가 종료되었다. 코로나로 인해 회사가 어려워지면서, 미래 사업이 잠정 중단되게 되었다. AI가 접목된 영단어 공부 앱이었는데, 시기 적절하게 릴리즈되었다면 세상의 관심을 받을 수 있지 않았을까 하는 개인적인 아쉬움이 남는다.* 외주 프로젝트 진행(2~5월)  식물과 곤충을 기를 수 있는 키트를 관리하는 앱을 개발했다. 백엔드 개발까지 완벽하게 할 수 있는 여유가 있지 않아서 DB는 Firebase Realtime Database를 사용하였다.* 앱 정식 출시(3월)  실제 사용자가 존재하는 앱을 배포했다. 배포 후 hotfix를 다시 업로드해야할 때는 마음이 참 무거웠다.* 스타트업(펫페오톡) : ~ing (since 2019.1)  뭐… 늘 해오듯… 묵묵히… 파이팅!* 네이버 D2SF 입성(2020.08)  감사하게도 대학생 창업 부문으로 선정이 되어 네이버의 지원을 받을 수 있게 되었다. 함께 계신 다른 스타트업 분들을 보며 자극도 많이 받고 넓은 물을 경험할 수 있게 되었다!2. 나를 발견하다어렴풋이 인지하고 있었던, 새롭게 발견한 나를 마주할 수 있었던 2020년이었다. 노력으로도 바꾸지 못하는 사람의 모습이 있다는 것을 인정하기로 했고, 이러한 나의 모습도 수용하고 나아가야한다.  문제를 회피하려는 성향  어쩌면  인간의 본능일지도 모른다. 하지만 스타트업을 운영하는 입장에서는 문제를 정면 돌파할 필요가 있다.  어느 정도 내 의견이 받아들여지지 않을 것 같다고 판단이 되면, 내 주장을 포기(?)해버린다.  첫번째 모습과도 연결되는데, 팀의 발전을 위해서는 내 마음을 잘 표현할 줄 알아야한다.  외부 피드백이지만, 개발자스럽지 않은 애티튜드가 장점이라고 한다.3. 부족하다…그것도 아주 많이!  집중력이 부족한 건 아닐까?조금의 변명을 하자면, 해야할 일이 너무 다양하다. 맘 편히 먹고 개발에만 몰두할 수가 없었다. 개발을 하다가 구글링을 하다가도, ‘아 맞다. 이거 했나?’ 생각이 들고, 긴급한 회의가 생기기도 하고… 2021년에는 시간과 업무를 관리하는 시스템을 더 견고히 쌓아올려야겠다. 이대로는 안된다.  세상에 잘난 사람이 너무 많다. 항상 배우려는 자세를 취하고, 모르는 것을 부끄러워하지 말자.  외부에서 나를 소개할 일이 있으면 CTO라 말하지 않고, 개발 총괄이라고 말하곤 한다. 기술에 있어 모르는 것도 많고 개발을 잘 하는 것도 아니기 때문이다.4. 그럼에도…  지금의 자리와 경험들이 몇년 후의 나에게는 엄청난 자양분이 될 것이라는 믿음을 가지고 살아가자!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-12-31T04:33:35+03:00'>31 Dec 2020</time><a class='article__image' href='/2020%EB%85%84-%ED%9A%8C%EA%B3%A0'> <img src='https://user-images.githubusercontent.com/26498433/103370943-869e9880-4b11-11eb-8d34-44782d9540fb.jpg' alt='2020년 회고'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/2020%EB%85%84-%ED%9A%8C%EA%B3%A0'>2020년 회고</a> </h2><p class='article__excerpt'>도전과 실패도 많았던 기나긴 2020년을 돌아보았다.</p></div></div></div>"
    } ,
  
    {
      "title"    : "Sung Kim 교수님을 뵙다!",
      "category" : "",
      "tags"     : "일상",
      "url"      : "/sung-kim-%EA%B5%90%EC%88%98%EB%8B%98%EC%9D%84-%EB%A7%8C%EB%82%98%EB%8B%A4!",
      "date"     : "Oct 14, 2020",
      "content"  : "When  2020년 10월 13일Where  네이버 D2 라운지  TMI : 우리 회사는 현재 네이버 D2(강남)에 입주해있다.Who  Sung Kim 교수님을.주저리 주저리  우연히 라운지에서 팀원분들과 일을 하고있는데, 건너편에서 뭔가 익숙한 얼굴의 후광(?)을 지니신 분이 계신 것이 보였다.  어렴풋이 들리는 목소리가 굉장히 익숙했고, 확신이 들었다(!)  교수님께서 자리를 뜨시고 나가시기 전에, 급하게 명함을 들고 인사를 드렸다(두근두근)  우리 아이템을 설명드렸고(엘리베이터 피칭 준비를 할 걸 그랬다), 평소에 가지고있었던 감사함(?)도 표현했다.  교수님께서는 정말 친절하게 대답해주셨고, 먼저 사진도 찍자고 하셨다ㅠ결론  마치 내 마음 속의 연예인을 만난 느낌이었다.  더 열심히 공부해야지. 파이팅!  교수님. 더 강해져서 뵙겠습니다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2020-10-14T02:54:35+03:00'>14 Oct 2020</time><a class='article__image' href='/sung-kim-%EA%B5%90%EC%88%98%EB%8B%98%EC%9D%84-%EB%A7%8C%EB%82%98%EB%8B%A4!'> <img src='https://user-images.githubusercontent.com/26498433/95883910-6be04180-0db6-11eb-9be5-c040d7ef7559.jpeg' alt='Sung Kim 교수님을 뵙다!'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/sung-kim-%EA%B5%90%EC%88%98%EB%8B%98%EC%9D%84-%EB%A7%8C%EB%82%98%EB%8B%A4!'>Sung Kim 교수님을 뵙다!</a> </h2><p class='article__excerpt'>다시 한 번 열심히 살 이유를 찾았다...!</p></div></div></div>"
    } ,
  
    {
      "title"    : "WBS, WBS-dictionary란 무엇인가?",
      "category" : "",
      "tags"     : "Project Management, WBS, and WBS dictionary",
      "url"      : "/wbs-dictionary%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80",
      "date"     : "Nov 16, 2018",
      "content"  : "이번 학기에는 졸업을 해야해서 프로젝트 진행 관련 수업을 2개 듣게 되었습니다.사실 혼자서 개발을 할 경우에는 주먹구구식으로 당장 필요한거 위주로 개발을 하다보면 얼추 결과물이 나오게 되죠.(그랬나?)하지만 최근 외주로 맡고있는 앱을 개발하면서 프로젝트 관리의 중요성을 점차 깨닫고 있는데요,아직 개발 단계가 아닌, 발주사로부터 업체 선정을 받고, 발주사와 함께 요구사항을 점검함과 동시에 프로젝트에 필요한 Work들을 tree형태로 쪼개는 단계에서 발생하는 산출물이 WBS-dictionary입니다.그러면 우선 사람들은 WBS에 대해 어떻게 말하는지 알아봅시다.WBS  Work Breakdown Structure의 줄임말.  발주사가 요구사항을 범위 기술서로 작성하여 수행사에 전달하면, 수행사는 그것을 가지고 “너가 말한 걸 이렇게 하면 되는건가요?”라는 식으로 작성하는 것.  이해관계자(발주사)가 정의한 다양한 요구사항을 수행 가능한 “작업”을 계측 구조로 정의하는 산출물.  프로젝트 추진 목표를 달성하는데 필요한 결과물을 위해 실행할 작업을 계층 구조로 세분화한 것.여기서 말하는 계층 구조란 예를 들면 tree 구조를 의미합니다. 주어진 프로젝트를 work package 또는 activity 단위로 쪼개서(decompposition)프로젝트의 작업이 상세하게 정의될 수 있도록 해줍니다.WBS 작성시 원칙  100% 법칙 : 하위 레벨의 업무들의 합은 상위 레벨의 업무의 양과 같아야한다는 법칙이다.  프로젝트 추진에 필요한 활동을 계획하는 것이 아니라 결과물이 나올 수 있는 계획이어야한다.  (대개) Level 2,3가 중요하다 : 대부분의 work package가 이 레벨에 존재하기 때문이다!  한 요소는 4개 이내의 하위요소로 가급적 구성되어야 한다.  같은 단계를 구성하는 요소들은 상호배타적(중복 X)이어야 한다.이렇게 작성된 WBS를 보고(ex. tree 구조로 work들이 구성된 그림), 이제 우리는 각 항목들에 대해서 WBS dictionary를 작성하게 됩니다.WBS dictionary란?  WBS의 각 요소(위의 그림에서의 경우 한 칸을 의미)에 대한 자세한 정보를 기술한 것.  WBS 산출물의 궁극적 목적은 프로젝트의 일정과 예산을 측정하고 일을 배정하는 기초 단위인 “work package”로 얻는 것으로 비용정산과 예산수립의 기본단위.  성공적인 계획수립을 위해서 가장 중요한 산출물 중의 하나이다.  WBS는 도식화된 개념이었기때문에 자세한 정보를 담기에는 한계가 있다. 따라서 이러한 정보를 담는 산출물을 만들게 되었다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-11-16T20:40:44+03:00'>16 Nov 2018</time><a class='article__image' href='/wbs-dictionary%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80'> <img src='https://lh6.googleusercontent.com/6QcLpyXBCs61XZ5eKzNLQZHPh91dIzX8L-J3DjG7GseVQ6_IFXKGRYv7gobh7xHRo1Ml8B89v9uA88RB6cC7wDnSgrtBbbfs-ET7Xj3jmjSt5sH3R3hKbtu7kAxII8Ewl2dynXvD' alt='WBS, WBS-dictionary란 무엇인가?'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/wbs-dictionary%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80'>WBS, WBS-dictionary란 무엇인가?</a> </h2><p class='article__excerpt'>프로젝트 관리</p></div></div></div>"
    } ,
  
    {
      "title"    : "안드로이드 SQLite DB에 싱글톤 적용하기(작성중)",
      "category" : "",
      "tags"     : "Android, SQLite, Database, Singlton, and Design Pattern",
      "url"      : "/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-sqlite-db%EC%97%90-%EC%8B%B1%EA%B8%80%ED%86%A4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0",
      "date"     : "Nov 12, 2018",
      "content"  : "안드로이드 내부 데이터베이스를 생성해서 써야할 프로젝트를 진행하고있다.주요 로직을 실행할 때마다 내부 데이터베이스의 데이터들을 불러오고 저장할 필요가 있기 때문에,아무것도 모르고 구현을 하게되면 매번 DB 객체를 생성하고 종료하는 것을 반복하게 되는 것이었다.이는 매우 비효율적이고 프로그램이 커지게되면 어떤 문제를 일으킬지 몰라 ‘최초 한 번만 메모리를 할당하고 그 메모리에 인스턴스를 만들어 사용하는’ 싱글톤 패턴을 적용해보려 하였다.이 글을 통해 당신이 배울 수 있는 것  싱글톤 패턴이란?  안드로이드 SQLite DB에 싱글톤 패턴 적용해보기그렇다면, 나는 싱글톤이라고 말만 들어봤지, 정확한 개념을 머릿 속에 가지고 있지 않다.싱글톤란 무엇일까?What is Singleton(Pattern)?  자바 디자인 패턴 중에 하나인듯하다.  하나의 클래스에 대해 앱이 시작될 때 한번만 메모리를 할당하고(static 이용), 그 메모리에 인스턴스를 생성한다.  생성자가 여러번 호출되어도 실제 생성되는 객체는 하나다.  최초에 만들어지는 생성자(A) 이후의 생성자(B) 호출에 대해서는 최초에 만들어지는 생성자(A)를 대신 반환해준다.So, How can I use that?(General)####1. 이른 초기화// singleton code herepublic class SingletonPatternExample {    public SingletonPatternExample() {        // constructor            }}####2. 늦은 초기화SQLite with SingletonSingleton의 문제점",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-11-12T04:48:45+03:00'>12 Nov 2018</time><a class='article__image' href='/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-sqlite-db%EC%97%90-%EC%8B%B1%EA%B8%80%ED%86%A4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0'> <img src='/images/android_default.png' alt='안드로이드 SQLite DB에 싱글톤 적용하기(작성중)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-sqlite-db%EC%97%90-%EC%8B%B1%EA%B8%80%ED%86%A4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0'>안드로이드 SQLite DB에 싱글톤 적용하기(작성중)</a> </h2><p class='article__excerpt'>싱글톤 패턴이란? 효율적인 안드로이드 내부 DB란?</p></div></div></div>"
    } ,
  
    {
      "title"    : "TensorFlow Lite(1)",
      "category" : "",
      "tags"     : "TFLite, Tensorflow, and Colab",
      "url"      : "/tensorflow-lite-%EB%AA%A8%EB%8D%B8-%EC%83%9D%EC%84%B1%EB%B6%80%ED%84%B0-.tflite%EA%B9%8C%EC%A7%80",
      "date"     : "Nov 9, 2018",
      "content"  : "이번 학기 프로젝트 중에 2개나 모바일에 딥러닝 모델을 사용해야할 필요가 생겨서(사실은 지난 학기에 텐서플로우 라이트를 맛본게 화근이었다…왠지 모를 자신감 상승…) 튜토리얼 정도 수준이 아닌 능동적인 수준의 실력이 필요하게 됐다.TensorFlow-for-poet같은 구글 코드랩의 예제 앱들을 보면서 어떻게 이렇게 되는걸까 항상 궁금했는데, 한 번 기초부터(Linear Regression 모델) 적용해보고자 한다.이 글을 준비하기 위해 여러 블로그 글과 유투브 강의들을 참고하였다.당신이 이 글을 통해 배울 수 있는 것  내가 만든 그래프를 freeze하기  약간의 Google Colab모델을 freeze한다?모델을 freeze한다는 것은 weight나 bias값을 variable에서 constant로 만들어준다는 의미이다.(말그대로 출렁이던 모델을 꽁꽁 얼려버린다는 의미이다)모델을 왜 freeze하는건데?이유는 별거 없다.  트레이닝 과정을 더이상 거치지 않고, 필요하지도 않다고 판단되어서.  텐서플로우는 gradient값이나 meta data등을 만들어내게 되는데, 이러한 것들이 실제로 결과값을 inference하는 단계에서는 더이상 필요하지 않기 때문.  모델의 파라미터들을 export하기위한 준비를 하려고.어떻게 freeze하는데?우선 예제 코드 링크이다. (예제라고 부를 정도로 기초탄탄 코드는 아니다. 죄송하다…)학습된 모델, 그래프, 체크포인트 구하기from google.colab import files # mounting google driveimport tensorflow as tfimport numpy as npW = tf.Variable(initial_value=tf.random_normal([1]), name=&#39;weight&#39;, trainable=True)b = tf.Variable(initial_value=0.001, name=&#39;bias&#39;, trainable=True)x = tf.placeholder(dtype=tf.float32, shape=[1], name=&#39;x&#39;)y = tf.add(tf.multiply(W, x), b, name=&#39;output&#39;)init = tf.global_variables_initializer()saver = tf.train.Saver()save_path = &quot;data/&quot;model_save = save_path + &quot;model.ckpt&quot;with tf.Session() as sess:    sess.run(init)    op = sess.run(y, feed_dict={x: np.reshape(1.5, [1])})    saver.save(sess, model_save)    tf.train.write_graph(sess.graph_def, save_path, &#39;savegraph.pbtxt&#39;)# 다운로드 받기(Colab + Google Drive)files.download(&quot;data/savegraph.pbtxt&quot;)files.download(&quot;data/model.ckpt.meta&quot;)모델 freeze하기from tensorflow.python.tools import freeze_graph# Freeze the graphsave_path = &quot;data/&quot;MODEL_NAME = &#39;Sample_model&#39;input_graph_path = save_path + &#39;savegraph.pbtxt&#39;checkpoint_path = save_path + &#39;model.ckpt&#39;input_saver_def_path = &quot;&quot;input_binary = Falseoutput_node_names = &quot;output&quot;restore_op_name = &quot;save/restore_all&quot;filename_tensor_name = &quot;save/Const:0&quot;output_frozen_graph_name = save_path + &#39;frozen_model_&#39; + MODEL_NAME + &#39;.pb&#39;clear_devices = Truefreeze_graph.freeze_graph(input_graph_path, input_saver_def_path,                         input_binary, checkpoint_path, output_node_names,                         restore_op_name, filename_tensor_name,                         output_frozen_graph_name, clear_devices, &quot;&quot;)frozen 모델 import해오기, Input &amp;amp; Output 노드 정의하기graph_def_file = &#39;data/frozen_model_Sample_model.pb&#39; # our pb fileinput_arrays = [&#39;x&#39;] # input node, 내가 그래프 만들 때 사용한 input의 이름으로 설정해야됨. output도 동일!output_arrays = [&#39;output&#39;] # output node# DEPRECATED : tf.contrib.lite.TocoConverter.from_frozen_graphconverter = tf.contrib.lite.TFLiteConverter.from_frozen_graph(graph_def_file, input_arrays, output_arrays)tflite_model = converter.convert()open(&quot;converted_model.tflite&quot;, &quot;wb&quot;).write(tflite_model)files.download(&quot;converted_model.tflite&quot;) # tflite 파일 다운로드",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-11-09T06:54:51+03:00'>09 Nov 2018</time><a class='article__image' href='/tensorflow-lite-%EB%AA%A8%EB%8D%B8-%EC%83%9D%EC%84%B1%EB%B6%80%ED%84%B0-.tflite%EA%B9%8C%EC%A7%80'> <img src='/images/android_default.png' alt='TensorFlow Lite(1)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/tensorflow-lite-%EB%AA%A8%EB%8D%B8-%EC%83%9D%EC%84%B1%EB%B6%80%ED%84%B0-.tflite%EA%B9%8C%EC%A7%80'>TensorFlow Lite(1)</a> </h2><p class='article__excerpt'>TensorFlow Lite 모델 생성부터 .tflite까지 + Google Colab Files</p></div></div></div>"
    } ,
  
    {
      "title"    : "포스팅 테스트",
      "category" : "",
      "tags"     : "test and jekyll",
      "url"      : "/%ED%8F%AC%EC%8A%A4%ED%8C%85-%ED%85%8C%EC%8A%A4%ED%8A%B8",
      "date"     : "Nov 9, 2018",
      "content"  : "오늘도 힘든 하루였습니다그냥 이런 식으로 글을 적으면 되는군요. Readme를 작성할 때 요령껏 적곤 했는데 이제는 제대로 적어야겠습니다. 오늘은 어떻게 지냈냐하면요…  늦잠을 잠  점심으로 학식을 먹음  기계학습 수업을 들음  수업 끝나고 공모전 발표 자료를 수정함  하숙밥을 먹음  카페에서 외주 앱 회의를 함(원격)  이렇게 블로그 새로 만들면서 딴 짓을 함",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-11-09T03:02:38+03:00'>09 Nov 2018</time><a class='article__image' href='/%ED%8F%AC%EC%8A%A4%ED%8C%85-%ED%85%8C%EC%8A%A4%ED%8A%B8'> <img src='/images/default.png' alt='포스팅 테스트'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/%ED%8F%AC%EC%8A%A4%ED%8C%85-%ED%85%8C%EC%8A%A4%ED%8A%B8'>포스팅 테스트</a> </h2><p class='article__excerpt'>포스팅 테스트입니다. 잘 되나요?</p></div></div></div>"
    } 
  
]
